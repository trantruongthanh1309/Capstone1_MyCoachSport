from flask import Flask, jsonify, session
from flask_cors import CORS
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy import create_engine
from api.leaderboard import leaderboard_bp  # Import leaderboard API t·ª´ leaderboard_route.py
from api.logs import logs_bp  # Import logs API t·ª´ logs.py
from api.chatbot import chatbot_bp 
from api.videos import videos_bp  # Import video API t·ª´ video.py
from db import db # Import db t·ª´ db.py n·∫øu b·∫°n ƒëang s·ª≠ d·ª•ng chung
from api.auth import auth_bp
from api.profile import profile_bp
from datetime import timedelta
from flask_session import Session

# Kh·ªüi t·∫°o Flask app
app = Flask(__name__)

# C·∫•u h√¨nh k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu SQL Server
app.config['SQLALCHEMY_DATABASE_URI'] = 'mssql+pyodbc://sa:123@MSI\\SQLEXPRESS01/MySportCoachAI?driver=ODBC+Driver+17+for+SQL+Server'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False  # T·∫Øt theo d√µi thay ƒë·ªïi trong SQLAlchemy ƒë·ªÉ ti·∫øt ki·ªám b·ªô nh·ªõ
app.config['SECRET_KEY'] = 'my_secret_key'
app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(days=1)
app.config['SESSION_TYPE'] = 'filesystem'   # ‚úÖ L∆∞u session trong server, kh√¥ng b·ªã CORS block
app.config['SESSION_PERMANENT'] = True
app.config['SESSION_USE_SIGNER'] = True
app.config['SESSION_COOKIE_SAMESITE'] = 'None'
app.config['SESSION_COOKIE_SECURE'] = False
app.config['SESSION_COOKIE_DOMAIN'] = 'localhost'
app.config['SESSION_COOKIE_PATH'] = '/'

Session(app)
# Kh·ªüi t·∫°o db v·ªõi app
db.init_app(app)

CORS(app, supports_credentials=True, origins=["http://localhost:5173"])


# H√†m ki·ªÉm tra k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu
def check_connection(db_url, db_name):
    """
    H√†m ki·ªÉm tra k·∫øt n·ªëi v·ªõi c∆° s·ªü d·ªØ li·ªáu.
    """
    try:
        engine = create_engine(db_url)
        with engine.connect() as conn:
            print(f"‚úÖ K·∫øt n·ªëi th√†nh c√¥ng t·ªõi {db_name}!")
        return True
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi t·ªõi {db_name}: {e}")
        return False

# Ki·ªÉm tra k·∫øt n·ªëi SQL Server
sql_server_status = check_connection(
    'mssql+pyodbc://sa:123@MSI\\SQLEXPRESS01/MySportCoachAI?driver=ODBC+Driver+17+for+SQL+Server', 
    "SQL Server"
)

# ƒêƒÉng k√Ω Blueprint t·ª´ logs.py, leaderboard_route.py, chat.py v√† video.py
app.register_blueprint(logs_bp, url_prefix='/api/logs')  # ƒêƒÉng k√Ω logs API v·ªõi ti·ªÅn t·ªë /api/logs
app.register_blueprint(leaderboard_bp, url_prefix='/api/leaderboard')  # ƒêƒÉng k√Ω leaderboard API v·ªõi ti·ªÅn t·ªë /api/leaderboard
app.register_blueprint(chatbot_bp, url_prefix='/api/chatbot')  # ƒêƒÉng k√Ω chat API v·ªõi ti·ªÅn t·ªë /api/chat
app.register_blueprint(videos_bp, url_prefix='/api/videos')  # ƒêƒÉng k√Ω video API v·ªõi ti·ªÅn t·ªë /api/video
app.register_blueprint(auth_bp, url_prefix='/api/auth') 
app.register_blueprint(profile_bp, url_prefix='/api/profile') 


GEMINI_API_KEY = "AIzaSyC5Dwwo6PYfKOS9RwUsaunIiyBNTevJy5U"  # Thay th·∫ø b·∫±ng API Key c·ªßa b·∫°n
GEMINI_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent"

from flask import Flask, request, jsonify
import requests
@app.route('/chat', methods=['POST'])
def chat():
    # Nh·∫≠n tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng
    data = request.json or {}
    user_msg = data.get("message", "").strip()

    # Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ch∆∞a nh·∫≠p tin nh·∫Øn
    if not user_msg:
        return jsonify({"reply": "‚ùå B·∫°n ch∆∞a nh·∫≠p tin nh·∫Øn."})

    # Ki·ªÉm tra API Key
    if not GEMINI_API_KEY:
        return jsonify({"reply": "‚ö†Ô∏è GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh."}), 500

    try:
        sys_prompt = "B·∫°n l√† MySportCoachAI - hu·∫•n luy·ªán vi√™n AI th√¢n thi·ªán. Tr·∫£ l·ªùi ng·∫Øn g·ªçn b·∫±ng ti·∫øng Vi·ªát."

        payload = {
            "contents": [
                {"role": "user", "parts": [{"text": sys_prompt}]},
                {"role": "user", "parts": [{"text": user_msg}]}
            ]
        }

        # G·ª≠i y√™u c·∫ßu ƒë·∫øn API Gemini
        r = requests.post(
            GEMINI_URL,
            headers={"Content-Type": "application/json"},
            params={"key": GEMINI_API_KEY},
            json=payload,
            timeout=20,
        )

        if r.status_code == 200:
            data = r.json()
            reply = data.get("candidates", [{}])[0].get("content", {}).get("parts", [{}])[0].get("text", "‚ö†Ô∏è Kh√¥ng c√≥ ph·∫£n h·ªìi")
            return jsonify({"reply": reply})

        return jsonify({"reply": f"‚ö†Ô∏è L·ªói g·ªçi Gemini API: {r.text}"}), 500

    except Exception as e:
        return jsonify({"reply": f"‚ùå L·ªói Backend: {e}"}), 500

@app.before_request
def show_session():
    
    print("üì¶ Session hi·ªán t·∫°i: ", dict(session))  # Ki·ªÉm tra session c√≥ gi√° tr·ªã kh√¥ng
    print("üç™ Cookies nh·∫≠n t·ª´ client: ", request.cookies)  # Ki·ªÉm tra cookie g·ª≠i t·ª´ client

if __name__ == "__main__":
    app.run(debug=True, host="localhost", port=5000)

